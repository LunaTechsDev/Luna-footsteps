//=============================================================================
// Luna_Footsteps.js
//=============================================================================
//=============================================================================
// Build Date: 2020-09-27 19:44:01
//=============================================================================
//=============================================================================
// Made with LunaTea -- Haxe
//=============================================================================

// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc A plugin that creates footstep sfx for players and events<LunaFootsteps>.

@target MV MZ


@help

A plugin that creates foot step sfx for players and events.

==== How To Use ====
<lfse: fileName volume pitch pan> notetag within the event or actor notebox
to generate the SE when they move.


MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/





(function ($hx_exports, $global) { "use strict"
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class CharacterPatch extends Game_Character {
}
CharacterPatch.__name__ = true
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""))
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0
		}
		this.r.m = this.r.exec(s)
		this.r.s = s
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched")
		}
	}
}
EReg.__name__ = true
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index)
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true
class LunaFootsteps {
	static main() {
		let _g = []
		let _g1 = 0
		let _g2 = $plugins
		while(_g1 < _g2.length) {
			let v = _g2[_g1]
			++_g1
			if(new EReg("<LunaFootsteps>","ig").match(v.description)) {
				_g.push(v)
			}
		}
		let plugin = _g[0]
		let params = plugin.parameters
		console.log("src/Main.hx:32:",LunaFootsteps.Params)
		
//=============================================================================
// Game_Character
//=============================================================================
      
		let _Game_Character_moveStraight = Game_Character.prototype.moveStraight
		Game_Character.prototype.moveStraight = function(d) {
			if(((this) instanceof Game_Event)) {
				LunaFootsteps.listener.emit("eventMove",GameCharacter.Event(this))
			}
			if(((this) instanceof Game_Player)) {
				LunaFootsteps.listener.emit("playerMove",GameCharacter.Player(this))
			}
			_Game_Character_moveStraight.call(this,d)
		}
		LunaFootsteps.listener.on("playerMove",function(player) {
			let se = LunaFootsteps.getSe(player)
			if(se != null) {
				AudioManager.playSe(se)
			}
		})
		LunaFootsteps.listener.on("eventMove",function(event) {
			let se = LunaFootsteps.getSe(event)
			if(se != null) {
				AudioManager.playSe(se)
			}
		})
	}
	static setupEvents() {
		LunaFootsteps.listener.on("playerMove",function(player) {
			let se = LunaFootsteps.getSe(player)
			if(se != null) {
				AudioManager.playSe(se)
			}
		})
		LunaFootsteps.listener.on("eventMove",function(event) {
			let se = LunaFootsteps.getSe(event)
			if(se != null) {
				AudioManager.playSe(se)
			}
		})
	}
	static getSe(char) {
		let note = ""
		let re = new EReg("<lfse:(\\w+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)>","ig")
		switch(char._hx_index) {
		case 0:
			note = $gameParty.leader().actor().note
			break
		case 1:
			note = char.event.event().note
			break
		}
		if(re.match(note)) {
			let tmp = StringTools.trim(re.matched(1))
			let string = StringTools.trim(re.matched(2))
			let tmp1 = parseInt(string,10)
			let string1 = StringTools.trim(re.matched(3))
			let tmp2 = parseInt(string1,10)
			let string2 = StringTools.trim(re.matched(4))
			return { name : tmp, volume : tmp1, pitch : tmp2, pan : parseInt(string2,10), pos : 0};
		} else {
			return null;
		}
	}
}
$hx_exports["LunaFootsteps"] = LunaFootsteps
LunaFootsteps.__name__ = true
Math.__name__ = true
class StringTools {
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos)
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length
		let r = 0
		while(r < l && StringTools.isSpace(s,r)) ++r
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length
		let r = 0
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
}
StringTools.__name__ = true
var GameCharacter = $hxEnums["GameCharacter"] = { __ename__ : true, __constructs__ : ["Player","Event"]
	,Player: ($_=function(player) { return {_hx_index:0,player:player,__enum__:"GameCharacter",toString:$estr}; },$_.__params__ = ["player"],$_)
	,Event: ($_=function(event) { return {_hx_index:1,event:event,__enum__:"GameCharacter",toString:$estr}; },$_.__params__ = ["event"],$_)
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message
		this.__previousException = previous
		this.__nativeException = native != null ? native : this
	}
	get_native() {
		return this.__nativeException;
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value)
			return e;
		}
	}
}
haxe_Exception.__name__ = true
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value
	}
}
haxe_ValueException.__name__ = true
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0
		this.array = array
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o)
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object"
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__]
				let n = e.__constructs__[o._hx_index]
				let con = e[n]
				if(con.__params__) {
					s = s + "\t"
					return n + "(" + ((function($this) {
						var $r
						let _g = []
						{
							let _g1 = 0
							let _g2 = con.__params__
							while(true) {
								if(!(_g1 < _g2.length)) {
									break
								}
								let p = _g2[_g1]
								_g1 = _g1 + 1
								_g.push(js_Boot.__string_rec(o[p],s))
							}
						}
						$r = _g
						return $r;
					}(this))).join(",") + ")"
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "["
				s += "\t";
				let _g = 0
				let _g1 = o.length
				while(_g < _g1) {
					let i = _g++
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr
			try {
				tostr = o.toString
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString()
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n"
			s += "\t";
			let hasp = o.hasOwnProperty != null
			let k = null
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1)
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true
class _$LTGlobals_$ {
}
_$LTGlobals_$.__name__ = true
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
	static updateProto(obj,fn) {
		return (fn)(obj.prototype);
	}
	static updateEntity(obj,fn) {
		return (fn)(obj);
	}
}
utils_Fn.__name__ = true
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance)
}
String.__name__ = true
Array.__name__ = true
js_Boot.__toStr = ({ }).toString
LunaFootsteps.listener = new PIXI.utils.EventEmitter()
LunaFootsteps.main()
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {})

//# sourceMappingURL=Luna_Footsteps.js.map